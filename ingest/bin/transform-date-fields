#!/usr/bin/env python3
"""
Standardizes format of date fields of the NDJSON record from stdin to
ISO 8601 date (YYYY-MM-DD) and outputs modified records to stdout.
"""
import argparse
import json
from datetime import datetime
from sys import stderr, stdin, stdout


def format_date(date_string: str, expected_formats: set) -> str:
    """
    Originally from nextstrain/ncov-ingest

    Format *date_string* to ISO 8601 date (YYYY-MM-DD).
    If *date_string* does not match *expected_formats*, return *date_string*.

    >>> expected_formats = {'%Y-%m-%d', '%Y-%m-%dT%H:%M:%SZ'}

    >>> format_date("2020", expected_formats)
    '2020-XX-XX'

    >>> format_date("2020-01", expected_formats)
    '2020-01-XX'

    >>> format_date("2020-1-15", expected_formats)
    '2020-01-15'

    >>> format_date("2020-1-1", expected_formats)
    '2020-01-01'

    >>> format_date("2020-01-15", expected_formats)
    '2020-01-15'

    >>> format_date("2020-01-15T00:00:00Z", expected_formats)
    '2020-01-15'
    """
    for date_format in expected_formats:
        try:
            parsed_date = datetime.strptime(date_string, date_format)
        except ValueError:
            continue
        year_string = str(parsed_date.year)
        month_string = str(parsed_date.month).zfill(2) if date_string.count('-') >= 1 else 'XX'
        day_string = str(parsed_date.day).zfill(2) if date_string.count('-') == 2 else 'XX'
        return f"{year_string}-{month_string}-{day_string}"

    if date_string:
        print(
            f"WARNING: Unable to transform date string {date_string!r} because it does not match",
            f"any of the expected formats {expected_formats}.",
            file=stderr
        )

    return date_string


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument("--date-fields", nargs="+",
        help="List of date field names in the NDJSON record that need to be standardized.")
    parser.add_argument("--expected-date-formats", nargs="+",
        help="Expected date formats that are currently in the provided date fields")

    args = parser.parse_args()

    expected_formats = set(args.expected_date_formats)

    for record in stdin:
        record = json.loads(record)

        for field in args.date_fields:
            date_string = record.get(field)
            if date_string:
                record[field] = format_date(date_string, expected_formats)

        json.dump(record, stdout, allow_nan=False, indent=None, separators=',:')
        print()
